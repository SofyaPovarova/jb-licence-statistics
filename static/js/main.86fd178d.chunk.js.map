{"version":3,"sources":["components/StatsBarChart.js","App.js","icons/IJ.png","icons/WS.png","icons/PS.png","components/PeriodSelector.js","components/TableComponent.js","serviceWorker.js","index.js"],"names":["StatsBarChart","props","className","width","height","data","stats","dataKey","product","fill","src","icon","alt","dayjs","extend","quarterOfYear","App","changeFromPoint","sign","setState","fromPoint","state","add","interval","console","log","changeInterval","value","cutPiece","piece","filter","line","date","componentDidMount","axios","method","url","then","res","Buffer","content","toString","split","statsObj","forEach","index","lineStat","push","IJ","isNaN","parseInt","WS","PS","catch","err","this","iconIJ","iconWS","iconPS","Component","module","exports","Option","Select","PeriodSelector","constructHint","dir","placement","title","onClick","defaultValue","onChange","TableComponent","findMin","reduce","min","p","Object","values","findMax","max","findAvg","Math","floor","sum","length","dataSource","avg","columns","dataIndex","pagination","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.86fd178d.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport BarChart from \"recharts/lib/chart/BarChart\";\nimport { XAxis,YAxis,Tooltip,Bar } from \"recharts\";\n\nfunction StatsBarChart (props) {\n    const choseColor = () => {\n        if (props.product === \"IJ\") return \"#fc315d\"\n        if (props.product === \"WS\") return \"#00ccd6\"\n        return \"#a44af2\"\n    }\n\n    return(\n        <div className=\"productStats\" >\n            <BarChart className=\"barChart\" width={530} height={150} data={props.stats}>\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey={props.product} fill={choseColor()}/>\n            </BarChart>\n            <img className=\"icon\" src={props.icon} alt=\"\"/>\n        </div>\n    )\n}\n\nexport default StatsBarChart;\n","import React, {Component} from 'react';\nimport './App.css';\nimport iconIJ from './icons/IJ.png'\nimport iconWS from './icons/WS.png'\nimport iconPS from './icons/PS.png'\nimport dayjs from \"dayjs\";\nimport axios from \"axios\";\nimport PeriodSelector from \"./components/PeriodSelector\";\nimport quarterOfYear from 'dayjs/plugin/quarterOfYear'\nimport TableComponent from \"./components/TableComponent\";\nimport StatsBarChart from \"./components/StatsBarChart\";\n\ndayjs.extend(quarterOfYear)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stats: [],\n      interval: 'quarter',\n      fromPoint: {},\n    };\n  }\n\n    changeFromPoint = (sign) => {\n      this.setState({fromPoint: dayjs(this.state.fromPoint).add(sign*1, this.state.interval)})\n      console.log(this.state.fromPoint)\n  }\n\n  changeInterval = value => {\n      this.setState({interval: value})\n  }\n\n  cutPiece = () => {\n      let piece = this.state.stats.filter( line =>\n          line.date > this.state.fromPoint &&\n          line.date <= dayjs(this.state.fromPoint).add(1, this.state.interval)\n      )\n      console.log(piece)\n      return piece\n  }\n\n  componentDidMount = () => {\n    axios({\n      method: 'get',\n      url: \"https://api.github.com/repos/burkov/fls-internship/contents/fls-data.csv\",\n    }).then(res => {\n        let stats = ((new Buffer(res.data.content, 'base64'))\n                .toString('ascii')\n                .split('\\n')\n        )\n\n        let statsObj= [];\n        stats.forEach(\n            (line, index) => {\n              const lineStat = line.split(',');\n              let date = \"\";\n              if (index) {\n                  date = dayjs(lineStat[0]);\n                  statsObj.push({\n                      date: date,\n                      IJ: isNaN(parseInt(lineStat[1])) ? 0 : parseInt(lineStat[1]),\n                      WS: isNaN(parseInt(lineStat[2])) ? 0 : parseInt(lineStat[2]),\n                      PS: isNaN(parseInt(lineStat[3])) ? 0 : parseInt(lineStat[3]),\n                  })\n              }\n\n            }\n        )\n\n        this.setState({\n            stats: statsObj,\n            fromPoint: statsObj[1].date,\n        });\n    }).catch(err=> console.log(err));\n  }\n\n  render() {\n\n      let stats = this.cutPiece();\n\n    return(\n        <div className=\"App\">\n          <h1 className=\"header\">License statistics</h1>\n          <PeriodSelector interval={this.state.interval}\n                          changeFromPoint={this.changeFromPoint}\n                          changeInterval={this.changeInterval}\n          />\n          <TableComponent stats={stats}/>\n          <div className=\"barChartsArea\">\n              <StatsBarChart stats={stats} product=\"IJ\" icon={iconIJ}/>\n              <StatsBarChart stats={stats} product=\"WS\" icon={iconWS}/>\n              <StatsBarChart stats={stats} product=\"PS\" icon={iconPS}/>\n          </div>\n\n        </div>\n    )\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/IJ.7fbf8284.png\";","module.exports = __webpack_public_path__ + \"static/media/WS.4c5b23af.png\";","module.exports = __webpack_public_path__ + \"static/media/PS.fd5c8e3f.png\";","import React, {Component} from \"react\";\nimport \"antd/dist/antd.css\";\nimport {Button, Select, Tooltip} from \"antd\";\nconst { Option } = Select;\n\nconst PeriodSelector = props => {\n    const constructHint = dir => {\n        return \"One \" + props.interval + \" \" + dir\n    }\n\n    return (\n        <div className=\"periodSelect\">\n            <Tooltip placement=\"leftTop\" title={constructHint(\"back\")}>\n                <Button onClick={() => props.changeFromPoint(-1)} >â¬…</Button>\n            </Tooltip>\n\n            <Select\n                className=\"container-dropdown\"\n                defaultValue={props.interval}\n                onChange={props.changeInterval}\n            >\n                <Option value='day'>One day</Option>\n                <Option value='week'>One week</Option>\n                <Option value='month'>One month</Option>\n                <Option value='quarter'>One quarter</Option>\n            </Select>\n            <Tooltip placement=\"rightTop\" title={constructHint(\"forward\")}>\n                <Button onClick={() => props.changeFromPoint(1)}>âž¡</Button>\n            </Tooltip>\n            </div>\n    )\n}\nexport default PeriodSelector;","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport {Table} from \"antd\";\n\nfunction TableComponent (props) {\n\n    const columns = [\n        {\n            title: \"Product\",\n            dataIndex: \"product\",\n        },\n        {\n            title: \"Min Usage\",\n            dataIndex: \"min\",\n        },\n        {\n            title: \"Max Usage\",\n            dataIndex: \"max\",\n        },\n        {\n            title: \"Average Usage\",\n            dataIndex: \"avg\",\n        }\n    ];\n\n    const findMin = product => {\n        return props.stats.reduce((min, p) => Object.values(p)[product] < min ? Object.values(p)[product] : min, 1000);\n    }\n    const findMax= product => {\n        return props.stats.reduce((max, p) => Object.values(p)[product] > max ? Object.values(p)[product] : max, 0);\n    }\n    const findAvg = product => {\n        return Math.floor(props.stats.reduce((sum, p) => sum+=Object.values(p)[product], 0)/props.stats.length);\n    }\n\n    const computeTable = () => {\n        return [\n            {\n                product: \"Inteliji IDEA\",\n                min: findMin(1),\n                max: findMax(1),\n                avg: findAvg(1),\n            },\n            {\n                product: \"WebStorm\",\n                min: findMin(2),\n                max: findMax(2),\n                avg: findAvg(2),\n            },\n            {\n                product: \"PhpStorm\",\n                min: findMin(3),\n                max: findMax(3),\n                avg: findAvg(3),\n            }\n        ]\n    }\n\n    return(\n        <Table\n            className=\"table\"\n            dataSource={computeTable()}\n            columns={columns}\n            pagination={false}\n        />\n    )\n}\n\nexport default TableComponent;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}