{"version":3,"sources":["utils/utils.js","components/StatsBarChart.js","StatisticsApp.js","icons/IJ.png","icons/WS.png","icons/PS.png","components/PeriodSelector.js","components/TableComponent.js","serviceWorker.js","index.js"],"names":["choseColor","product","StatsBarChart","props","className","width","height","data","stats","dataKey","fill","src","icon","alt","dayjs","extend","quarterOfYear","StatisticsApp","changeFromPoint","sign","setState","fromPoint","state","add","interval","changeInterval","value","cutStats","filter","line","date","componentDidMount","axios","method","url","then","res","Buffer","content","toString","split","statsObj","forEach","index","lineStat","push","IJ","isNaN","parseInt","WS","PS","catch","err","console","log","this","title","iconIJ","iconWS","iconPS","Component","module","exports","Option","Select","PeriodSelector","constructHint","dir","placement","onClick","defaultValue","onChange","TableComponent","columns","dataIndex","render","color","key","toUpperCase","findMin","reduce","min","p","Object","values","findMax","max","findAvg","Math","floor","sum","length","dataSource","table","ind","avg","computeTable","pagination","margine","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.37c51b9c.chunk.js","sourcesContent":["const choseColor = product => {\n    if (product === \"IJ\" || product === \"Inteliji IDEA\") return \"#fc315d\"\n    if (product === \"WS\" || product === \"WebStorm\") return \"#00ccd6\"\n    return \"#a44af2\"\n}\n\nexport default choseColor;\n\n","import React from 'react';\nimport BarChart from \"recharts/lib/chart/BarChart\";\nimport {XAxis, YAxis, Tooltip, Bar, ResponsiveContainer} from \"recharts\";\nimport choseColor from \"../utils/utils\"\n\nfunction StatsBarChart (props) {\n    return(\n\n        <div className=\"productStats\" >\n            <ResponsiveContainer width=\"90%\" height={150}>\n                <BarChart className=\"barChart\" data={props.stats}>\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey={props.product} fill={choseColor(props.product)}/>\n                </BarChart>\n            </ResponsiveContainer>\n            <img className=\"icon\" src={props.icon} alt=\"\"/>\n        </div>\n    )\n}\n\nexport default StatsBarChart;\n//width={530} height={150}","import React, {Component} from 'react';\nimport './StatisticsApp.css';\nimport dayjs from \"dayjs\";\nimport axios from \"axios\";\nimport quarterOfYear from 'dayjs/plugin/quarterOfYear'\nimport iconIJ from './icons/IJ.png'\nimport iconWS from './icons/WS.png'\nimport iconPS from './icons/PS.png'\nimport PeriodSelector from \"./components/PeriodSelector\";\nimport TableComponent from \"./components/TableComponent\";\nimport StatsBarChart from \"./components/StatsBarChart\";\nimport {PageHeader} from \"antd\";\n\ndayjs.extend(quarterOfYear)\n\nclass StatisticsApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stats: [],\n      interval: 'quarter',\n      fromPoint: {},\n    };\n  }\n\n  changeFromPoint = sign => {\n      this.setState({fromPoint: dayjs(this.state.fromPoint).add(sign*1, this.state.interval)})\n  }\n\n  changeInterval = value => {\n      this.setState({interval: value})\n  }\n\n  cutStats = () => {\n      return this.state.stats.filter( line =>\n          line.date > this.state.fromPoint &&\n          line.date <= dayjs(this.state.fromPoint).add(1, this.state.interval)\n      )\n  }\n\n  componentDidMount = () => {\n    axios({\n      method: 'get',\n      url: \"https://api.github.com/repos/burkov/fls-internship/contents/fls-data.csv\",\n    }).then(res => {\n        let stats = ((new Buffer(res.data.content, 'base64'))\n                .toString('ascii')\n                .split('\\n')\n        )\n\n        let statsObj= [];\n        stats.forEach(\n            (line, index) => {\n              const lineStat = line.split(',');\n              if (index) {\n                  statsObj.push({\n                      date: dayjs(lineStat[0]),\n                      IJ: isNaN(parseInt(lineStat[1])) ? 0 : parseInt(lineStat[1]),\n                      WS: isNaN(parseInt(lineStat[2])) ? 0 : parseInt(lineStat[2]),\n                      PS: isNaN(parseInt(lineStat[3])) ? 0 : parseInt(lineStat[3]),\n                  })\n              }\n\n            }\n        )\n        this.setState({\n            stats: statsObj,\n            fromPoint: statsObj[0].date,\n        });\n    }).catch(err=> console.log(err));\n  }\n\n  render() {\n      let stats = this.cutStats();\n\n      return(\n          <div className=\"StatisticsApp\">\n              <h1 className=\"header\" title=\"License statistics\">License statistics</h1>\n              <div className=\"content\">\n                  <PeriodSelector interval={this.state.interval}\n                                  changeFromPoint={this.changeFromPoint}\n                                  changeInterval={this.changeInterval}\n                  />\n                  <TableComponent stats={stats}/>\n                  <div className=\"barChartsArea\">\n                      <StatsBarChart stats={stats} product=\"IJ\" icon={iconIJ}/>\n                      <StatsBarChart stats={stats} product=\"WS\" icon={iconWS}/>\n                      <StatsBarChart stats={stats} product=\"PS\" icon={iconPS}/>\n                  </div>\n              </div>\n\n          </div>\n      )\n  }\n}\n\nexport default StatisticsApp;\n","module.exports = __webpack_public_path__ + \"static/media/IJ.7fbf8284.png\";","module.exports = __webpack_public_path__ + \"static/media/WS.4c5b23af.png\";","module.exports = __webpack_public_path__ + \"static/media/PS.fd5c8e3f.png\";","import React, {Component} from \"react\";\nimport \"antd/dist/antd.css\";\nimport {Button, Select, Tooltip} from \"antd\";\nconst { Option } = Select;\n\nconst PeriodSelector = props => {\n    const constructHint = dir => {\n        return \"One \" + props.interval + \" \" + dir\n    }\n\n    return (\n        <div className=\"periodSelect\">\n            <Tooltip placement=\"leftTop\" title={constructHint(\"back\")}>\n                <Button onClick={() => props.changeFromPoint(-1)} >⬅</Button>\n            </Tooltip>\n\n            <Select\n                className=\"container-dropdown\"\n                defaultValue={props.interval}\n                onChange={props.changeInterval}\n            >\n                <Option value='day'>One day</Option>\n                <Option value='week'>One week</Option>\n                <Option value='month'>One month</Option>\n                <Option value='quarter'>One quarter</Option>\n            </Select>\n            <Tooltip placement=\"rightTop\" title={constructHint(\"forward\")}>\n                <Button onClick={() => props.changeFromPoint(1)}>➡</Button>\n            </Tooltip>\n            </div>\n    )\n}\nexport default PeriodSelector;","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport {Table, Tag} from \"antd\";\nimport choseColor from \"../utils/utils\"\nfunction TableComponent (props) {\n\n\n    const columns = [\n        {\n            title: \"Product\",\n            dataIndex: \"product\",\n            render: (product => {\n                return (\n                    <Tag color={choseColor(product)} key={product}>\n                        {product.toUpperCase()}\n                    </Tag>\n                );\n            })\n        },\n        {\n            title: \"Min Usage\",\n            dataIndex: \"min\",\n        },\n        {\n            title: \"Max Usage\",\n            dataIndex: \"max\",\n        },\n        {\n            title: \"Average Usage\",\n            dataIndex: \"avg\",\n        }\n    ];\n\n    const findMin = product => {\n        return props.stats.reduce((min, p) => Object.values(p)[product] < min ? Object.values(p)[product] : min, 1000);\n    }\n    const findMax= product => {\n        return props.stats.reduce((max, p) => Object.values(p)[product] > max ? Object.values(p)[product] : max, 0);\n    }\n    const findAvg = product => {\n        return Math.floor(props.stats.reduce((sum, p) => sum+=Object.values(p)[product], 0)/props.stats.length);\n    }\n\n    const computeTable = () => {\n        console.log(props.stats)\n        let table = [];\n        [\"Inteliji IDEA\", \"WebStorm\", \"PhpStorm\"].forEach((\n            product, ind) => {\n            table.push({\n                product,\n                min: findMin(ind+1, product),\n                max: findMax(ind+1),\n                avg: findAvg(ind+1),\n            })\n        })\n        console.log(\"computed\")\n\n        return table;\n    }\n\n    return(\n        <Table\n            className=\"table\"\n            dataSource={computeTable()}\n            columns={columns}\n            pagination={false}\n            margine={0}\n        />\n    )\n}\n\nexport default TableComponent;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport StatisticsApp from './StatisticsApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StatisticsApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}